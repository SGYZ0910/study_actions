# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: '1.8'
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    # 通过 Dockerfile 构建镜像
    - name: Build docker image
      run: docker build . -t demo_actions:0.1
    
    # 登陆到我们自己的 docker registry
    - name: Login to aliyun docker image registry
      run: echo "${{ secrets.REGISTRY_PASSWORD }}" |  docker login --username=shuangguanyize registry.cn-hangzhou.aliyuncs.com --password-stdin
    - name: docker tag to aliyun docker image registry
      run: docker tag demo_actions:0.1 registry.cn-hangzhou.aliyuncs.com/yvam0910/demo_actions:0.1
    # 上传 docker 镜像
    - name: Push image to aliyun docker image registry
      run: docker push registry.cn-hangzhou.aliyuncs.com/yvam0910/demo_actions:0.1
    

    # # 连接到远程服务器
    - name: Connect to server
      uses: webfactory/ssh-agent@v0.4.1
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    # 初始化 knownhosts
    - name: Setup knownhosts
      run: ssh-keyscan {{ 42.194.141.181 }} >> ~/.ssh/known_hosts

    # # 触发服务器部署脚本
    - name: Trigger server deployment script
      run: ssh root@42.194.141.181 "sh 1.sh"


